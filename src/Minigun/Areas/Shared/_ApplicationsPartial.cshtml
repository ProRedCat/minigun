@model ApplicationsPartialModel

<div class="w-full p-2 border-secondary-blue-grey border-b bg-white">
    <div class="relative ml-4 inline-block text-left w-96">
        <!-- Hidden input to store selected application -->
        <input type="hidden"
               id="selected-application"
               name="applicationIdentifier"
               value="@Model.Applications.First().Identifier"/>

        <!-- Dropdown button with first item pre-selected -->
        <!-- TODO: Change this so that we show the correct one on load -->
        <button class="flex justify-between items-center w-full py-2 font-medium text-sm focus:outline-none"
                onclick="toggleDropdown()">
            <div class="flex space-x-2 items-center">
                <img src="/images/svg/app-icon.svg" alt="Application Icon"/>
                <p id="dropdown-text" class="ml-2">
                    @Model.Applications.First().Name
                </p>
            </div>
            <img src="/images/svg/dropdown-icon.svg" alt="Dropdown Icon" class="ml-4"/>
        </button>

        <div id="dropdown-menu" class="absolute w-full overflow-y-auto max-h-96 bg-white border border-gray-200 rounded-t-none rounded-md shadow-lg hidden">
            <div class="p-2">
                <input type="text"
                       id="dropdown-search"
                       placeholder="Search..."
                       class="w-full border border-gray-300 rounded-md p-2">
            </div>

            @foreach (var application in Model.Applications)
            {
                <div class="dropdown-item px-4 py-2 text-sm text-gray-700 cursor-pointer hover:bg-gray-100"
                     data-application-id="@application.Identifier"
                     data-application-name="@application.Name"
                     hx-on:click="selectApplication(this)">
                    @application.Name
                </div>
            }
        </div>
    </div>
</div>

<script>
    function toggleDropdown() {
        const dropdownMenu = document.getElementById('dropdown-menu');
        dropdownMenu.classList.toggle('hidden');

        if (!dropdownMenu.classList.contains('hidden')) {
            document.getElementById('dropdown-search').focus();
        }
    }

    function selectApplication(element) {
        const applicationId = element.dataset.applicationId;
        const applicationName = element.dataset.applicationName;

        document.getElementById('selected-application').value = applicationId;
        document.getElementById('dropdown-text').textContent = applicationName;

        document.getElementById('dropdown-menu').classList.add('hidden');

        // Dispatch application selected event
        const event = new CustomEvent('applicationSelected', {
            detail: { applicationId, applicationName }
        });
        document.dispatchEvent(event);
    }

    function filterApplications() {
        const filter = document.getElementById('dropdown-search').value.toLowerCase();
        document.querySelectorAll('#dropdown-menu .dropdown-item')
            .forEach(item => {
                item.style.display = item.textContent.toLowerCase().includes(filter)
                    ? ''
                    : 'none';
            });
    }

    document.getElementById('dropdown-search')?.addEventListener('keyup', filterApplications);
</script>